name: autodevops-go-docker

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: autodevops-go-docker-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  security-events: write

env:
  REGISTRY: autodevopsacr.azurecr.io
  GIT_CREDENTIALS_SECRET: git-credentials
  REGISTRY_SECRET: acr-credentials
  AZURE_SECRET: azure-credentials
  APP_NAMESPACE: argo
  RESOURCE_GROUP: sda-auto-devops-demo
  IMAGE_TAG: ${{ github.sha }}

jobs:
  static-analysis:
    name: Static Code Analysis & Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Download Dependencies
        run: go mod tidy

      - name: Run go vet
        run: go vet ./...

      - name: Run GolangCI-Lint
        id: golangci-lint
        uses: golangci/golangci-lint-action@v4.0.0
        with:
          version: v1.56
        continue-on-error: true

      - name: Upload GolangCI-Lint Report
        if: steps.golangci-lint.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: golangci-lint-report
          path: |
            ./report.json
            ./golangci-lint.log
          if-no-files-found: ignore

      - name: Fail Pipeline On Lint Errors
        if: steps.golangci-lint.outcome == 'failure'
        run: |
          echo "::error ::GolangCI-Lint found issues. Please review the report artifact for full details."
          exit 1

      - name: Run Gosec
        uses: securego/gosec@v2.19.0
        with:
          args: ./...

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: static-analysis
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Download Dependencies
        run: go mod tidy
      - name: Run Tests
        run: go test -v -covermode=atomic -coverprofile=coverage.out ./...

  build-binary:
    name: Build Go Binary
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Build Binary
        run: go build -v -o build/app .

  docker-build-push:
    name: Build, Scan, and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build-binary
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Build Docker Image
        run: docker build -t ${{ env.REGISTRY }}/go-docker:${{ env.IMAGE_TAG }} .
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@v0.19.0
        with:
          image-ref: ${{ env.REGISTRY }}/go-docker:${{ env.IMAGE_TAG }}
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: 1
      - name: Push Docker Image to ACR
        run: docker push ${{ env.REGISTRY }}/go-docker:${{ env.IMAGE_TAG }}

  infrastructure:
    name: Provision Infrastructure (Terraform/ARM)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: docker-build-push
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Terraform Init
        run: terraform init
        working-directory: infra/terraform
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: infra/terraform
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: infra/terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [docker-build-push, infrastructure]
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
      - name: Set Kubernetes Namespace
        run: kubectl config set-context --current --namespace=${{ env.APP_NAMESPACE }}
      - name: Create or Update ACR Credentials Secret
        run: |
          kubectl get secret ${{ env.REGISTRY_SECRET }} || kubectl create secret docker-registry ${{ env.REGISTRY_SECRET }} --docker-server=${{ env.REGISTRY }} --docker-username=${{ secrets.ACR_USERNAME }} --docker-password=${{ secrets.ACR_PASSWORD }} --namespace ${{ env.APP_NAMESPACE }}
      - name: Deploy with Helm
        uses: azure/setup-helm@v3
      - name: Helm Upgrade
        run: |
          helm upgrade --install go-docker ./helm/go-docker \
            --set image.repository=${{ env.REGISTRY }}/go-docker \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --namespace ${{ env.APP_NAMESPACE }}
      - name: Enforce AKS & Azure Policies
        run: |
          echo "Placeholder for AKS/azure policy CLI commands if required"

  post-deploy-test:
    name: Post-Deployment Validation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
      - name: Set Kubernetes Namespace
        run: kubectl config set-context --current --namespace=${{ env.APP_NAMESPACE }}
      - name: Connectivity/Smoke Test
        run: ./scripts/smoke-test.sh

  monitoring:
    name: Monitoring and Policy Enforcement
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: post-deploy-test
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Configure Azure Monitor & Prometheus
        run: |
          echo "Monitoring is set up per Azure/Prometheus configs."

  codeql:
    name: Code Scanning (GitHub CodeQL)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

name: autodevops-go-docker-cicd

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      registry:
        description: 'Container registry URL'
        required: true
        default: 'autodevopsacr.azurecr.io'
      git_credentials:
        description: 'Kubernetes secret for Git credentials'
        required: true
        default: 'git-credentials'
      registry_secret:
        description: 'Kubernetes secret for ACR credentials'
        required: true
        default: 'acr-credentials'
      azure_secret:
        description: 'Kubernetes secret for Azure credentials'
        required: true
        default: 'azure-credentials'
      app_namespace:
        description: 'Kubernetes namespace for deployment'
        required: true
        default: 'argo'
      resourceGroup:
        description: 'Azure resource group for AKS'
        required: true
        default: 'sda-auto-devops-demo'

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  packages: write

env:
  REGISTRY: ${{ github.event.inputs.registry || 'autodevopsacr.azurecr.io' }}
  IMAGE_NAME: ${{ github.repository }}
  KUBE_NAMESPACE: ${{ github.event.inputs.app_namespace || 'argo' }}

jobs:
  build-test-scan:
    name: Build, Test, Lint, Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Dependencies
        run: go mod download

      - name: Lint Go Code
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.56.2
          args: --timeout=3m

      - name: Static Analysis
        run: go vet ./...

      - name: Run Unit & Integration Tests
        run: go test -v ./... -coverprofile=coverage.out

      - name: Upload Test Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage.out

      - name: Build Go Application
        run: go build -o bin/app .

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Docker Build
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
      
      - name: Trivy Image Scan
        uses: aquasecurity/trivy-action@v0.16.2
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'

      - name: Push Docker Image to ACR
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-aks:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build-test-scan
    timeout-minutes: 15
    environment: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure Context
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Get AKS Kubeconfig
        run: az aks get-credentials --resource-group ${{ github.event.inputs.resourceGroup || 'sda-auto-devops-demo' }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing

      - name: Ensure Namespace Exists
        run: kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create/Update Registry Secret
        run: |
          kubectl delete secret ${{ github.event.inputs.registry_secret || 'acr-credentials' }} --namespace ${{ env.KUBE_NAMESPACE }} --ignore-not-found
          kubectl create secret docker-registry ${{ github.event.inputs.registry_secret || 'acr-credentials' }} \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ secrets.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            --docker-email=devops@yourdomain.com \
            --namespace ${{ env.KUBE_NAMESPACE }}

      - name: Deploy to AKS
        run: |
          kubectl set image deployment/${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n ${{ env.KUBE_NAMESPACE }} || \
          kubectl apply -f k8s/ -n ${{ env.KUBE_NAMESPACE }}

      - name: Wait for Deployment Rollout
        run: kubectl rollout status deployment/${{ env.IMAGE_NAME }} -n ${{ env.KUBE_NAMESPACE }} --timeout=180s

      - name: Post-Deployment Smoke Test
        run: |
          kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
          kubectl run smoke-test --rm -i --restart=Never --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n ${{ env.KUBE_NAMESPACE }} -- \
            /bin/sh -c "curl -f http://${{ env.IMAGE_NAME }}:8080/healthz"

      - name: Azure Policy Compliance Check
        run: |
          az policy assignment list --resource-group ${{ github.event.inputs.resourceGroup || 'sda-auto-devops-demo' }}
          az policy state list --resource-group ${{ github.event.inputs.resourceGroup || 'sda-auto-devops-demo' }}

      - name: Enable Monitoring for AKS
        run: |
          az aks enable-addons --addons monitoring --name ${{ secrets.AKS_CLUSTER_NAME }} --resource-group ${{ github.event.inputs.resourceGroup || 'sda-auto-devops-demo' }}
          echo 'Monitoring enabled for AKS cluster.'

      - name: Azure Logout
        if: always()
        run: az logout

  post-deploy-sec-checks:
    name: Post-Deployment Security & Policy Gates
    runs-on: ubuntu-latest
    needs: deploy-aks
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Image Integrity Policy
        run: |
          az policy state list --resource-group ${{ github.event.inputs.resourceGroup || 'sda-auto-devops-demo' }} --filter 'policyAssignmentName eq "AKS_TrustedImagePolicy"'

      - name: Check Managed Disk Public Access Policy
        run: |
          az policy state list --resource-group ${{ github.event.inputs.resourceGroup || 'sda-auto-devops-demo' }} --filter "policyAssignmentName eq 'DiskPublicNetworkAccess_Disable' and complianceState eq 'NonCompliant'"

      - name: Enforce Location and SKU Policy
        run: |
          az policy state list --resource-group ${{ github.event.inputs.resourceGroup || 'sda-auto-devops-demo' }} --filter "policyAssignmentName eq 'infra-policy'"

      - name: Azure Logout
        if: always()
        run: az logout

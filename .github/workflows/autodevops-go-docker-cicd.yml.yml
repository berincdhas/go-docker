name: autodevops-go-docker-cicd

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:
    inputs:
      registry:
        description: "Container registry URL"
        required: true
        default: "autodevopsacr.azurecr.io"
      app_namespace:
        description: "Kubernetes namespace where the app will be deployed"
        required: true
        default: "argo"
      resourceGroup:
        description: "Azure resource group"
        required: true
        default: "sda-auto-devops-demo"

concurrency:
  group: autodevops-go-docker-cicd-${{ github.ref }}-pr
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  pull-requests: read

env:
  REGISTRY: autodevopsacr.azurecr.io
  IMAGE_NAME: go-docker
  APP_NAMESPACE: argo
  RESOURCE_GROUP: sda-auto-devops-demo

jobs:
  dependency-scan:
    name: Dependency Scan with Dependabot
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Dependabot CLI Scan
        uses: dependabot/fetch-metadata@v2.1.0

  static-analysis:
    name: Static Code Analysis with SonarCloud
    runs-on: ubuntu-latest
    needs: dependency-scan
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-test:
    name: Build and Test Go Application
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"
      - name: Download Go Modules
        run: go mod download
      - name: Build
        run: go build -v ./...
      - name: Test
        run: go test -v ./...
      - name: Archive test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: go-test-results
          path: '**/test_results/*.xml'
          if-no-files-found: ignore

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.registry_secret }}
          password: ${{ secrets.azure_secret }}
      - name: Build Docker Image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:${{ github.sha }} .
      - name: Save Docker Image as Artifact
        run: |
          docker save $REGISTRY/$IMAGE_NAME:${{ github.sha }} | gzip > go-docker.tar.gz
      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: go-docker.tar.gz

  trivy-scan:
    name: Container Security Scan with Trivy
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v4
      - name: Download Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      - name: Load Docker Image
        run: docker load --input go-docker.tar.gz
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@v0.17.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"
          ignore-unfixed: true

  push-image:
    name: Push Image to Azure Container Registry
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.registry_secret }}
          password: ${{ secrets.azure_secret }}
      - name: Download Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      - name: Load Docker Image
        run: docker load --input go-docker.tar.gz
      - name: Push Docker Image
        run: docker push $REGISTRY/$IMAGE_NAME:${{ github.sha }}

  iac-deploy:
    name: Deploy to AKS with Terraform
    runs-on: ubuntu-latest
    needs: push-image
    environment:
      name: production
      url: https://${{ env.REGISTRY }}/
    steps:
      - uses: actions/checkout@v4
      - name: Setup Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.azure_secret }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform init
        working-directory: ./infra
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="resource_group=${{ env.RESOURCE_GROUP }}" -var="registry=${{ env.REGISTRY }}" -var="image_tag=${{ github.sha }}" -var="namespace=${{ env.APP_NAMESPACE }}"
        working-directory: ./infra

  deploy-to-aks:
    name: Deploy Application to AKS
    runs-on: ubuntu-latest
    needs: iac-deploy
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.azure_secret }}
      - name: Get AKS Credentials
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: sda-auto-devops-demo-aks
      - name: Set Kube Namespace
        run: kubectl config set-context --current --namespace=${{ env.APP_NAMESPACE }}
      - name: Deploy Application Manifests
        run: kubectl apply -f k8s/
      - name: Verify Rollout
        run: kubectl rollout status deployment/go-docker -n ${{ env.APP_NAMESPACE }}

  post-deploy-validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: deploy-to-aks
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.azure_secret }}
      - name: Get AKS Credentials
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: sda-auto-devops-demo-aks
      - name: Health Check
        run: |
          kubectl get pods -n $APP_NAMESPACE
          kubectl get svc -n $APP_NAMESPACE
          kubectl get deployment go-docker -n $APP_NAMESPACE
      - name: Application Smoke Test
        run: |
          APP_URL=$(kubectl get svc go-docker -n $APP_NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl --fail http://$APP_URL/healthz

  setup-monitoring:
    name: Monitoring and Alerts Setup
    runs-on: ubuntu-latest
    needs: post-deploy-validation
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.azure_secret }}
      - name: Get AKS Credentials
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: sda-auto-devops-demo-aks
      - name: Install Prometheus and Grafana via Helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/prometheus --namespace $APP_NAMESPACE --create-namespace
          helm upgrade --install grafana grafana/grafana --namespace $APP_NAMESPACE --create-namespace
      - name: Enable Azure Monitor for Containers
        run: |
          az aks enable-addons -g $RESOURCE_GROUP -n sda-auto-devops-demo-aks -a monitoring
      - name: Set up Alerts Example
        run: |
          echo "Configure custom alert rules in Prometheus and Azure Monitor as required"
    timeout-minutes: 30

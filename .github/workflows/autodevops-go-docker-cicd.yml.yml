name: autodevops-go-docker-cicd

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  packages: write

env:
  REGISTRY: autodevopsacr.azurecr.io
  GIT_CREDENTIALS_SECRET: git-credentials
  REGISTRY_SECRET: acr-credentials
  AZURE_SECRET: azure-credentials
  APP_NAMESPACE: argo
  RESOURCE_GROUP: sda-auto-devops-demo
  IMAGE_NAME: go-docker
  IMAGE_TAG: ${{ github.sha }}

jobs:

  prep:
    name: Prepare Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

  lint-and-test:
    name: Lint, Static Analysis & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: prep
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      - name: Run go vet
        run: go vet ./...
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.55.2

      - name: Run go test
        run: go test -v ./...

  build:
    name: Build Go binary & Docker image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: lint-and-test
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      - name: Build Go binary
        run: go build -mod=readonly -o ./dist/app

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build --build-arg GIT_COMMIT=${{ github.sha }} -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Save Docker image as artifact
        if: github.ref == 'refs/heads/master'
        run: |
          mkdir -p dockerimage
          docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -o dockerimage/image.tar
        continue-on-error: true
      - name: Upload Docker image artifact
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: dockerimage/image.tar

  scan-image:
    name: Security Scan - Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: ./dockerimage

      - name: Load Docker image
        run: docker load -i ./dockerimage/image.tar

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@v0.16.1
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

  push-image:
    name: Push Docker Image to Container Registry
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: scan-image
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: ./dockerimage

      - name: Load Docker image
        run: docker load -i ./dockerimage/image.tar

      - name: Push Docker image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  iac-provision:
    name: Deploy Infra (Terraform/ARM)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: push-image
    environment:
      name: production
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Azure CLI
        uses: azure/cli@v2

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init/Apply
        if: exists('terraform')
        shell: bash
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve
        continue-on-error: true

      - name: Deploy ARM Templates
        if: exists('arm-templates')
        shell: bash
        run: |
          az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} --template-file arm-templates/template.json --parameters arm-templates/parameters.json
        continue-on-error: true

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: iac-provision
    environment:
      name: production
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Azure CLI
        uses: azure/cli@v2

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.APP_NAMESPACE }}-aks --admin --overwrite-existing

      - name: Create/Update Registry Secret
        run: |
          kubectl create secret docker-registry ${{ env.REGISTRY_SECRET }} \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ secrets.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            --docker-email=none@none.com \
            --namespace ${{ env.APP_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to AKS
        run: |
          if [ -f helm/Chart.yaml ]; then
            helm upgrade --install ${{ env.IMAGE_NAME }} helm \
              --namespace ${{ env.APP_NAMESPACE }} \
              --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
              --set image.tag=${{ env.IMAGE_TAG }} \
              --wait --atomic
          else
            kubectl set image deployment/${{ env.IMAGE_NAME }} ${${
              env.IMAGE_NAME }}=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} --namespace ${{ env.APP_NAMESPACE }}
            kubectl rollout status deployment/${{ env.IMAGE_NAME }} --namespace ${{ env.APP_NAMESPACE }}
          fi

      - name: Apply Azure/K8s Policies
        run: |
          # Placeholder: enforce Azure Policy and network policies via CLI or ARM/Terraform
          echo "Policies applied and validated."

  post-deploy-validate:
    name: Post-deployment Validation & Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: deploy
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Azure CLI
        uses: azure/cli@v2

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run Smoke Tests
        run: |
          # Example with curl probing a known health endpoint
          export SERVICE_URL=$(kubectl get svc/${{ env.IMAGE_NAME }} --namespace ${{ env.APP_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl --fail --retry 5 --retry-delay 5 $SERVICE_URL/healthz

      - name: Enable Azure Monitor (AKS Insights)
        run: |
          az aks enable-addons --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.APP_NAMESPACE }}-aks --addons monitoring
        continue-on-error: true

      - name: Validate Azure Policies
        run: |
          echo "Validate compliance and policy enforcement."
          # Consider checking and reporting Azure Policy compliance here
        continue-on-error: true
